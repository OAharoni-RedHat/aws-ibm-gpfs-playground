---
- name: Playbook to set up the Openshift Cluster
  hosts: localhost
  gather_facts: false
  become: false
  vars_files:
    # Use this to override stuff that won't be committed to git
    - ./overrides.yml
  tasks:
    - name: Create working folder
      ansible.builtin.file:
        path: "{{ ocpfolder }}"
        state: directory
        recurse: true

    - name: Template OCP install file
      tags:
        - ocp_install
      ansible.builtin.template:
        src: ../templates/full-cluster-install-config.j2.yaml
        dest: "{{ ocpfolder }}/install-config.yaml"

    - name: Set kubeadmin password fact
      tags:
        - ocp_install
      ansible.builtin.shell: |
        python -c 'import bcrypt; print(bcrypt.hashpw(b"{{ kubeadmin_pass }}", bcrypt.gensalt(rounds=10)).decode())' | base64 -w0
      register:
        hashed_password_out

    - name: Set hashed password fact
      ansible.builtin.set_fact:
        hashed_password: "{{ hashed_password_out.stdout }}"

    - name: Install ocp cluster
      tags:
        - ocp_install
      ansible.builtin.shell: |
        set -ex
        id
        {{ basefolder }}/{{ ocp_version }}/openshift-install create cluster --dir=. &> /tmp/oc-{{ ocp_version }}-{{ ocp_cluster_name }}.log
      args:
        chdir: "{{ ocpfolder }}"

    - name: Set kubeadmin password
      tags:
        - ocp_install
      ansible.builtin.shell: |
        set -e
        chmod 0600 ./auth/kubeconfig
        export KUBECONFIG=./auth/kubeconfig
        oc patch secret -n kube-system kubeadmin --type json -p '[{"op": "replace", "path": "/data/kubeadmin", "value": "'{{ hashed_password }}'"}]'
      args:
        chdir: "{{ ocpfolder }}"

    - name: Find OpenShift EC2 Instances
      tags:
        - ebs
      amazon.aws.ec2_instance_info:
        region: "{{ ocp_region }}"
        filters:
          "tag:Name": "{{ ocp_cluster_name }}*worker*"
      register: ec2_workers

    - name: Set EC2 workers instance IDs
      tags:
        - ebs
      ansible.builtin.set_fact:
        worker_ec2_ids: "{{ ec2_workers.instances | map(attribute='instance_id') | list }}"

    - name: Create EBS io2 volume
      tags:
        - ebs
      amazon.aws.ec2_vol:
        region: "{{ ocp_region }}"
        availability_zone: "{{ ocp_az }}"
        volume_size: "{{ ebs_volume_size }}"
        volume_type: "{{ ebs_volume_type }}"
        multi_attach: yes
        iops: "{{ ebs_iops }}"
        tags:
          Name: "gpfs-volume"
      register: ebs_volume

    - name: Attach EBS volume to workers
      tags:
        - ebs
      amazon.aws.ec2_vol:
        region: "{{ ocp_region }}"
        instance: "{{ item }}"
        id: "{{ ebs_volume.volume_id }}"
        device_name: "{{ ebs_device_name }}"
      loop: "{{ worker_ec2_ids }}"
      when: ebs_volume.volume_id is defined

    - name: Install ibm spectrum manifest
      tags:
        - gpfs
      ansible.builtin.shell: |
        set -e
        export KUBECONFIG=./auth/kubeconfig
        oc apply -f https://raw.githubusercontent.com/IBM/ibm-spectrum-scale-container-native/{{ gpfs_version }}/generated/scale/install.yaml
      args:
        chdir: "{{ ocpfolder }}"

    - name: Create gpfs folder
      tags:
        - gpfs
      ansible.builtin.file:
        path: "{{ gpfsfolder }}"
        state: directory
        recurse: true

    - name: template ocp mirror
      tags:
        - gpfs
      ansible.builtin.template:
        src: ../templates/imagedigestmirror.yaml
        dest: "{{ gpfsfolder }}/imagedigestmirror.yaml"

    - name: Apply mirror template
      tags:
        - gpfs
      ansible.builtin.shell: |
        set -e
        export KUBECONFIG=./auth/kubeconfig
        {{ basefolder }}/{{ ocp_version }}/oc apply -f "{{ gpfsfolder }}/imagedigestmirror.yaml"
      args:
        chdir: "{{ ocpfolder }}"

    - name: Update global pull secret
      tags:
        - gpfs
      ansible.builtin.shell: |
        set -ex
        export KUBECONFIG=./auth/kubeconfig
        NEW_PS=$({{ basefolder }}/{{ ocp_version }}/oc -n openshift-config get secret pull-secret -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d  | jq -c '.auths += {"quay.io/rhsysdeseng":{"auth":"{{ ibmpullsecret }}", "email":""}}' | base64 -w 0)
        {{ basefolder }}/{{ ocp_version }}/oc -n openshift-config patch secret pull-secret -p "{\"data\":{\".dockerconfigjson\":\"$NEW_PS\"}}"
      args:
        chdir: "{{ ocpfolder }}"

    - name: Create ibm secret
      tags:
        - gpfs
      ansible.builtin.shell: |
        set -ex
        export KUBECONFIG=./auth/kubeconfig
        cat <<EOF > ibmscaleps.json
        {"auths":{"quay.io/rhsysdeseng":{"auth":"{{ ibmpullsecret }}","email":""}}}
        EOF
        for namespace in ibm-spectrum-scale ibm-spectrum-scale-operator ibm-spectrum-scale-dns ibm-spectrum-scale-csi; do
          {{ basefolder }}/{{ ocp_version }}/oc create secret docker-registry ibm-entitlement-key -n ${namespace} --from-file=.dockerconfigjson=./ibmscaleps.json
        done
      args:
        chdir: "{{ ocpfolder }}"

    - name: Template files
      tags:
        - gpfs
      ansible.builtin.template:
        src: ../templates/{{ item }}
        dest: "{{ gpfsfolder }}/{{ item }}"
      loop:
        - mco.yaml
        - cluster.yaml

    - name: Apply MCO template
      tags:
        - gpfs
      ansible.builtin.shell: |
        set -ex
        export KUBECONFIG=./auth/kubeconfig
        {{ basefolder }}/{{ ocp_version }}/oc apply -f {{ gpfsfolder }}/mco.yaml
      args:
        chdir: "{{ ocpfolder }}"
